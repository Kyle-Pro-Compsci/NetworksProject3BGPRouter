#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, struct, sys, math


class TableEntry:
    ASPath = []

    def __init__(self, peer, netmask, network, ASPath, localpref, selfOrigin, origin):
        self.peer = peer
        self.netmask = netmask
        self.network = network
        self.ASPath = ASPath
        self.localpref = localpref
        self.selfOrigin = selfOrigin
        self.origin = origin

    # Turn the contents into a dict
    def to_dict(self):
        return {
            'peer': self.peer,
            'netmask': self.netmask,
            'network': self.network,
            'ASPath': self.ASPath,
            'localpref': self.localpref,
            'selfOrigin': self.selfOrigin,
            'origin': self.origin
        }

    def is_preferred(self, other_table_entry):
        this_netmask_quads = list(int(qdn) for qdn in self.netmask.split('.'))
        other_netmask_quads = list(int(qdn) for qdn in other_table_entry.netmask.split('.'))
        # Compare mask length, local pref, selfOrigin, ASPath length,
        if self.netmask != other_table_entry.netmask:
            return self.quad1_greater_than_quad2(this_netmask_quads, other_netmask_quads)
        elif self.localpref != other_table_entry.localpref:
            return self.localpref > other_table_entry.localpref
        elif self.selfOrigin != other_table_entry.selfOrigin:
            return self.selfOrigin
        elif len(self.ASPath) != len(other_table_entry.ASPath):
            return len(self.ASPath) < len(other_table_entry.ASPath)
        elif self.origin != other_table_entry.origin:
            return self.origin1_better_than_origin2(self.origin, other_table_entry.origin)
        else:
            boolean_test = self.quad1_less_than_quad2(other_table_entry.peer, self.peer)
            print("quad 1 ", other_table_entry.peer, ", is less than quad 2 ", self.peer, " = ", boolean_test)

            this_peer_quads = list(int(qdn) for qdn in self.peer.split('.'))
            other_peer_quads = list(int(qdn) for qdn in other_table_entry.peer.split('.'))

            return self.quad1_less_than_quad2(this_peer_quads, other_peer_quads)

    def quad1_greater_than_quad2(self, quad1, quad2):
        for i in range(len(quad1)):
            if quad1[i] > quad2[i]:
                return True
        return False

    def quad1_less_than_quad2(self, quad1, quad2):
        for i in range(len(quad1)):
            if quad1[i] < quad2[i]:
                return True
            elif quad1[i] > quad2[i]:
                return False
        print("The quads are Equal :O")
        return False

    def origin1_better_than_origin2(self, origin1, origin2):
        origin_dict = {'IGP': 3, 'EGP': 2, 'UNK': 1}
        return origin_dict[origin1] > origin_dict[origin2]


class Router:
    relations = {}
    sockets = {}
    ports = {}
    # socket_masks = {}

    update_record = []
    withdraw_record = []

    forwarding_table = []  # Stores TableEntry(s)

    def __init__(self, asn, connections):
        print("Router at AS %s starting up" % asn)
        self.asn = asn
        for relationship in connections:
            port, neighbor, relation = relationship.split("-")

            self.sockets[neighbor] = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            self.sockets[neighbor].bind(
                ('localhost', 0))  # Port 0 triggers OS to automatically return a suitable available port
            self.ports[neighbor] = int(port)
            self.relations[neighbor] = relation
            self.send(neighbor,
                      json.dumps({"type": "handshake", "src": self.our_addr(neighbor), "dst": neighbor, "msg": {}}))

    def our_addr(self, dst):
        quads = list(int(qdn) for qdn in dst.split('.'))
        quads[3] = 1
        return "%d.%d.%d.%d" % (quads[0], quads[1], quads[2], quads[3])

    def send(self, network, message):
        self.sockets[network].sendto(message.encode('utf-8'), ('localhost', self.ports[network]))

    def run(self):
        while True:
            socks = select.select(self.sockets.values(), [], [], 0.1)[0]
            for conn in socks:
                k, addr = conn.recvfrom(65535)
                print("Received: k: %s, addr: %s" % (k, addr))
                srcif = None
                for sock in self.sockets:
                    if self.sockets[sock] == conn:
                        srcif = sock
                        break
                msg = k.decode('utf-8')

                print("Received message '%s' from %s" % (msg, srcif))

                self.parse_json(msg, sock)
        return

    # Take in a general JSON message and handle it
    def parse_json(self, msg, sock_received):
        msg_dict = json.loads(msg)

        if msg_dict['type'] == 'update':
            self.handle_update(msg_dict)
        elif msg_dict['type'] == 'handshake':
            self.handle_handshake(msg_dict)
        elif msg_dict['type'] == 'withdraw':
            self.handle_withdraw(msg_dict)
        elif msg_dict['type'] == 'dump':
            self.handle_dump(msg_dict)
        elif msg_dict['type'] == 'data':
            self.handle_data(msg_dict, sock_received)
        else:
            raise Exception("Message type %s is not handled" % msg_dict['type'])

    def handle_update(self, update_dict):
        self.update_record.append(update_dict)
        src_ip = update_dict['src']

        # Update table entries
        self.add_table_entry(update_dict)

        # Broadcast update to others
        if self.relations[src_ip] == 'cust':
            self.broadcast_update(update_dict, True)
        elif self.relations[src_ip] == 'peer' or self.relations[src_ip] == 'prov':
            self.broadcast_update(update_dict, False)
        else:
            raise Exception("Could not match ip to relation")

    # Add a forwarding table entry
    def add_table_entry(self, update_dict):
        msg_dict = update_dict['msg']
        peer = update_dict['src']
        netmask = msg_dict['netmask']
        network = msg_dict['network']
        ASPath = msg_dict['ASPath']
        localpref = msg_dict['localpref']
        selfOrigin = msg_dict['selfOrigin']
        origin = msg_dict['origin']

        new_entry = TableEntry(peer, netmask, network, ASPath, localpref, selfOrigin, origin)
        # NEED TO ADD AGGREGATION LATER
        self.forwarding_table.append(new_entry)

    # Broadcast updates based on relation. If the message is from a customer, broadcast to all other networks.
    def broadcast_update(self, update_dict, from_cust):
        for ip in list(self.relations.keys()):
            if ip == update_dict['src']:
                continue
            if self.relations[ip] == 'cust':
                self.send_update_to(update_dict, ip)
            elif from_cust:
                self.send_update_to(update_dict, ip)
        return

    # Send an update to a specific network
    def send_update_to(self, update_dict, dst_ip):
        src_ip = self.our_addr(dst_ip)
        announcement_dict = {}
        announcement_dict['type'] = 'update'
        announcement_dict['src'] = src_ip
        announcement_dict['dst'] = dst_ip

        msg_payload_dict = update_dict['msg']
        as_path = [self.asn] + msg_payload_dict['ASPath']
        print("new AS_Path is:")
        print(as_path)
        announcement_payload_dict = {}
        announcement_payload_dict['network'] = msg_payload_dict['network']
        announcement_payload_dict['netmask'] = msg_payload_dict['netmask']
        announcement_payload_dict['ASPath'] = as_path
        announcement_dict['msg'] = announcement_payload_dict

        self.send(dst_ip, json.dumps(announcement_dict))
        return

    # Handle a received message of type data
    def handle_data(self, data_dict, sock_received):
        print("Relations:")
        print(self.relations)
        for table_entry in self.forwarding_table:
            if self.mask(table_entry.network, table_entry.netmask) == self.mask(data_dict['src'], table_entry.netmask):
                src_netmask = table_entry.netmask
                src_network = table_entry.network
            if self.mask(table_entry.network, table_entry.netmask) == self.mask(data_dict['dst'], table_entry.netmask):
                print("Found match for peer masked")
                dst_netmask = table_entry.netmask
                dst_peer = table_entry.peer

        if (self.relations[sock_received] == 'peer' or self.relations[sock_received] == 'prov') \
                and (self.relations[dst_peer] == 'peer' or self.relations[dst_peer] == 'prov'):
            print("Illegal send")
            return

        routes_to_destination = []
        # Fill out any routes that fit network masks
        for entry in self.forwarding_table:
            if self.mask(data_dict['dst'], entry.netmask) == self.mask(entry.network, entry.netmask):
                routes_to_destination.append(entry)
        print("Amount of routes %d" % len(routes_to_destination))
        print(data_dict, ", ", routes_to_destination)
        while len(routes_to_destination) > 1:
            left_index_preferred = routes_to_destination[0].is_preferred(routes_to_destination[1])
            if left_index_preferred:
                del routes_to_destination[1]
            else:
                del routes_to_destination[0]

        data_forward_dict = {}
        data_forward_dict['type'] = 'data'
        data_forward_dict['src'] = self.our_addr(sock_received)
        data_forward_dict['msg'] = data_dict['msg']

        if len(routes_to_destination) == 0:
            print("Return to sender")
            data_forward_dict['dst'] = sock_received
            self.send(sock_received, json.dumps(data_forward_dict))
            return

        data_forward_dict['dst'] = data_dict['dst']
        print("Sending to ", routes_to_destination[0].peer)
        self.send(routes_to_destination[0].peer, json.dumps(data_forward_dict))
        return

    def handle_handshake(self, handshake_dict):
        print("HANDSHAKE - not expected")
        return

    def handle_withdraw(self, withdraw_dict):
        self.withdraw_record.append(withdraw_dict)
        # Next remove dead entry from table
        src_ip = withdraw_dict['src']

        # Withdraw Table Entry
        self.withdraw_table_entry(withdraw_dict)

        # Broadcast update to others
        if self.relations[src_ip] == 'cust':
            self.broadcast_withdraw(withdraw_dict, True)
        elif self.relations[src_ip] == 'peer' or self.relations[src_ip] == 'prov':
            self.broadcast_withdraw(withdraw_dict, False)
        else:
            raise Exception("Could not match ip to relation")

        return

    # Remove items from the forwarding table if they are from the peer sending the withdraw and match the network and netmask
    def withdraw_table_entry(self, withdraw_dict):
        msg_list_of_dict = withdraw_dict['msg']
        print("Size of withdraw list: ", len(msg_list_of_dict))

        new_forwarding_table = []
        for dict in msg_list_of_dict:
            for table_entry in self.forwarding_table:
                if not (table_entry.peer == withdraw_dict['src'] and table_entry.network == dict[
                    'network'] and table_entry.netmask == dict['netmask']):
                    new_forwarding_table.append(table_entry)  # Add to new table if it is NOT a match
        self.forwarding_table = new_forwarding_table
        return

    # Send the withdraw message depending on relation
    def broadcast_withdraw(self, withdraw_dict, from_cust):
        for ip in list(self.relations.keys()):
            if ip == withdraw_dict['src']:
                continue
            if self.relations[ip] == 'cust':
                self.send_withdraw_to(withdraw_dict, ip)
            elif from_cust:
                self.send_withdraw_to(withdraw_dict, ip)
        return

    def send_withdraw_to(self, withdraw_dict, dst_ip):
        src_ip = self.our_addr(dst_ip)
        announcement_dict = {}
        announcement_dict['type'] = 'withdraw'
        announcement_dict['src'] = src_ip
        announcement_dict['dst'] = dst_ip

        announcement_dict['msg'] = withdraw_dict['msg']

        self.send(dst_ip, json.dumps(announcement_dict))
        return

    def handle_dump(self, dump_dict):
        response_table_dict = {}
        response_table_dict['src'] = self.our_addr(dump_dict['src'])
        response_table_dict['dst'] = dump_dict['src']
        response_table_dict['type'] = 'table'

        response_payload_list = []
        for entry in self.forwarding_table:
            response_payload_list.append(entry.to_dict())

        response_table_dict['msg'] = response_payload_list
        self.send(dump_dict['src'], json.dumps(response_table_dict))
        return

    # Takes in a network ip and a net_mask and returns a masked network ip
    def mask(self, network, net_mask) -> str:

        network_quads = list(int(qdn) for qdn in network.split('.'))
        net_mask_quads = list(int(qdn) for qdn in net_mask.split('.'))

        masked_quads = []
        for i in range(len(network_quads)):
            masked_binary_quad = network_quads[i] & net_mask_quads[i]
            masked_quads.insert(i, masked_binary_quad)
        output = "%d.%d.%d.%d" % (masked_quads[0], masked_quads[1], masked_quads[2], masked_quads[3])
        # print("masking %s with %s and returning output %s" % (network, net_mask, output))
        return output


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='route packets')
    parser.add_argument('asn', type=int, help="AS number of this router")
    parser.add_argument('connections', metavar='connections', type=str, nargs='+', help="connections")
    args = parser.parse_args()
    router = Router(args.asn, args.connections)
    router.run()

# ./run configs/1-1-simple-send.conf
